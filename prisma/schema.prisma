// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Puzzle {
  id  Int  @id @default(autoincrement())
  title String
  gameType String // "remove" || "move"
  limit Int
  difficulty String @default("Unrated") // "Easy", "Normal", "Hard", "Extreme"
  difficultySetAt DateTime? // 난이도가 처음 설정된 시간
  initialState Json // 초기 상태
  category Json // 문자열 배열 저장
  createById Int // 만든 유저 아이디
  createBy User @relation("CreatedPuzzles", fields: [createById], references: [id])
  attemptedCount Int @default(0) // 시도한 유저 수
  correctCount Int @default(0) // 정답을 맞힌 유저 수
  totalFeedbackScore Int @default(0) // 피드백 점수 총합
  feedbackCount Int @default(0) // 피드백을 남긴 유저 수
  createAt DateTime @default(now()) // 생성 시간 자동 기록
  editerPick Boolean @default(false) // 퍼즐 편집자 선정 여부
  feaebacks Feedback[]
  comments Comment[]
  likes Like[]
  solutions Solution[]
  solvedByUsers User[] @relation("SolvedPuzzles")
  attemptedByUsers User[] @relation("AttemptedPuzzles")
}

model Solution {
  id Int @id @default(autoincrement())
  puzzleId Int
  answer Json

  puzzle Puzzle @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
}

model Like {
  id Int @id @default(autoincrement())
  puzzleId Int
  userId Int

  puzzle Puzzle @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([puzzleId, userId], name : "userId_puzzleId_unique") // 유저가 퍼즐에 한 번만 좋아요를 누를 수 있도록 제한
}

model Feedback {
  id  Int @id @default(autoincrement())
  userId Int
  puzzleId Int
  score Int // 피드백 점수(1 ~ 10)
  createAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  puzzle Puzzle @relation(fields: [puzzleId], references: [id])
}
model User {
  id Int @id @default(autoincrement())
  role String @default("user") // "user" || "admin"
  username String @unique
  email String @unique // 이메일 (로그인용)
  password String // 해싱된 패스워드
  isVerified Boolean @default(false) // 인증 여부
  verificationToken String? // 이메일 인증 토큰
  level Int @default(1) // 유저 레벨
  exp Int @default(0) // 현재 경험치
  totalExp Int @default(0) // 총 경험치
  membership Boolean @default(false) // 멤버십 여부

  // 힌트 관련 필드 추가
  hintCount Int @default(3) // 기본 3개 제공
  lastHintChanrgeAt DateTime? // 마지막 힌트 충전 시간
  createCount Int @default(3) // 퍼즐 생성 횟수

  // 스킨 관련 필드 추가
  unlockedSkins Json @default("[]") // 해금된 스킨 목록
  currentSkin String @default("default") // 현재 스킨

  createdPuzzles Puzzle[] @relation("CreatedPuzzles")
  solvedPuzzles Puzzle[] @relation("SolvedPuzzles")
  attemptedPuzzles Puzzle[] @relation("AttemptedPuzzles")
  feedbacks Feedback[]
  comments Comment[]
  likes Like[]
}

model Comment {
  id Int @id @default(autoincrement())
  content String // 댓글 내용
  createdAt DateTime @default(now()) // 작성 시간
  updatedAt DateTime @updatedAt
  isSpoiler Boolean @default(false) // 스포일러 여부

  userId Int
  puzzleId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  puzzle Puzzle @relation(fields: [puzzleId], references: [id], onDelete: Cascade)
}